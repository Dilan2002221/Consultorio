-- (1) Eliminar la BD si existe
DROP DATABASE IF EXISTS DBconsultoriopsi;

-- (2) Crear la BD
CREATE DATABASE DBconsultoriopsi;

------------------------------------------------------------------------
-- 1. ELIMINAR TABLAS Y TIPOS (si ya existen)
------------------------------------------------------------------------
DROP TABLE IF EXISTS Reportes CASCADE;
DROP TABLE IF EXISTS ListaEspera CASCADE;
DROP TABLE IF EXISTS Citas CASCADE;
DROP TABLE IF EXISTS Pacientes CASCADE;
DROP TABLE IF EXISTS Terapeutas CASCADE;
DROP TABLE IF EXISTS Usuarios CASCADE;

DROP TYPE IF EXISTS estado_usuario CASCADE;
DROP TYPE IF EXISTS prioridad_type CASCADE;
DROP TYPE IF EXISTS estado_cita_type CASCADE;
DROP TYPE IF EXISTS estado_lista_type CASCADE;
DROP TYPE IF EXISTS tipo_notificacion CASCADE;
DROP TYPE IF EXISTS tipo_reporte CASCADE;
DROP TYPE IF EXISTS estado_paciente_type CASCADE;  -- Nuevo para Pacientes

------------------------------------------------------------------------
-- 2. CREAR TIPOS ENUM
------------------------------------------------------------------------
CREATE TYPE estado_usuario AS ENUM ('activo', 'inactivo');
CREATE TYPE prioridad_type AS ENUM ('alta', 'media', 'baja');
CREATE TYPE estado_cita_type AS ENUM ('pendiente','programada','en curso','completada','cancelada');
CREATE TYPE estado_lista_type AS ENUM ('pendiente', 'en progreso', 'finalizado');
CREATE TYPE tipo_notificacion AS ENUM ('recordatorio', 'confirmación', 'cancelación', 'promoción');
CREATE TYPE tipo_reporte AS ENUM ('uso', 'financiero', 'pacientes', 'terapeutas');

-- Nuevo ENUM para el estado de Pacientes
CREATE TYPE estado_paciente_type AS ENUM ('activo', 'pausa', 'desertado');

------------------------------------------------------------------------
-- 3. HABILITAR EXTENSIÓN NECESARIA
------------------------------------------------------------------------
CREATE EXTENSION IF NOT EXISTS btree_gist;

------------------------------------------------------------------------
-- 4. TABLA TERAPEUTAS
------------------------------------------------------------------------
CREATE TABLE Terapeutas (
    id_terapeuta SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    apellido VARCHAR(50) NOT NULL,
    correo VARCHAR(100) UNIQUE NOT NULL,
    especialidad VARCHAR(100),
    estado estado_usuario DEFAULT 'activo',
    creado_en TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
select * from Terapeutas;
------------------------------------------------------------------------
-- 5. TABLA PACIENTES (usa ENUM en "estado")
------------------------------------------------------------------------
CREATE TABLE Pacientes (
    id_paciente SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    apellido VARCHAR(50) NOT NULL,
    cedula VARCHAR(20) UNIQUE NOT NULL,
    correo VARCHAR(100) UNIQUE NOT NULL,
    tipo_atencion VARCHAR(50) NOT NULL,
    estado estado_paciente_type DEFAULT 'activo',  -- Se reemplaza el VARCHAR(20)
    terapeuta_id INT REFERENCES Terapeutas(id_terapeuta),
    creado_en TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
select * from Pacientes;
delete from pacientes where id_paciente =6;
------------------------------------------------------------------------
-- 6. TABLA USUARIOS
------------------------------------------------------------------------
CREATE TABLE Usuarios (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    rol VARCHAR(20) NOT NULL CHECK (rol IN ('admin', 'terapeuta')),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
select * from Usuarios; 
-- Vincular Terapeuta con Usuario (opcional)
ALTER TABLE Terapeutas
    ADD COLUMN usuario_id INT UNIQUE,
    ADD CONSTRAINT fk_terapeuta_usuario
        FOREIGN KEY (usuario_id) REFERENCES Usuarios(id);

------------------------------------------------------------------------
-- 7. TABLA CITAS
------------------------------------------------------------------------
CREATE TABLE Citas (
    id_cita SERIAL PRIMARY KEY,
    paciente_id INT NOT NULL REFERENCES Pacientes(id_paciente) ON DELETE CASCADE,
    terapeuta_id INT NOT NULL REFERENCES Terapeutas(id_terapeuta) ON DELETE CASCADE,
    fecha_hora TIMESTAMPTZ NOT NULL,
    duracion INTERVAL DEFAULT '1 hour',
    estado estado_cita_type DEFAULT 'programada',
    rango_horario TSTZRANGE,
    observaciones TEXT,
    creado_en TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    tipo_atencion VARCHAR(50)  -- Campo agregado previamente
);
select * from Citas;
SELECT duracion::text FROM Citas WHERE id_cita = 3;

------------------------------------------------------------------------
-- 8. TABLA LISTA DE ESPERA
------------------------------------------------------------------------
CREATE TABLE ListaEspera (
    id_lista SERIAL PRIMARY KEY,
    paciente_id INT NOT NULL REFERENCES Pacientes(id_paciente) ON DELETE CASCADE,
    terapeuta_id INT NOT NULL REFERENCES Terapeutas(id_terapeuta) ON DELETE CASCADE,
    fecha_solicitud TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    prioridad prioridad_type DEFAULT 'media',
    estado estado_lista_type DEFAULT 'pendiente',
    observaciones TEXT,
    creado_en TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
select * from ListaEspera;
------------------------------------------------------------------------
-- 9. TABLA REPORTES
------------------------------------------------------------------------
CREATE TABLE Reportes (
  id_reporte SERIAL PRIMARY KEY,
  editor VARCHAR(50),
  cita_id INTEGER REFERENCES Citas(id_cita) ON DELETE CASCADE,
  contenido TEXT NOT NULL,
  creado_en TIMESTAMP DEFAULT NOW()
);

select * from Reportes;
delete from reportes where id_reporte = 3;
SELECT * FROM Reportes WHERE cita_id = 3;
------------------------------------------------------------------------
-- 10. FUNCIONES Y TRIGGERS
------------------------------------------------------------------------

-- Función para actualizar rango_horario
CREATE OR REPLACE FUNCTION actualizar_rango_horario()
RETURNS TRIGGER AS $$
BEGIN
  NEW.rango_horario := tstzrange(
    NEW.fecha_hora, 
    NEW.fecha_hora + NEW.duracion::INTERVAL, 
    '[)'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para actualizar rango horario
CREATE TRIGGER trigger_actualizar_rango_horario
BEFORE INSERT OR UPDATE ON Citas
FOR EACH ROW EXECUTE FUNCTION actualizar_rango_horario();

-- Función para actualizar la Lista de Espera
CREATE OR REPLACE FUNCTION actualizar_lista_espera()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE ListaEspera
  SET estado = 'en progreso'
  WHERE paciente_id = NEW.paciente_id
    AND estado != 'en progreso'; -- Evitar actualizaciones innecesarias
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para actualizar lista de espera al insertar Cita
CREATE TRIGGER trigger_actualizar_lista_espera
AFTER INSERT ON Citas
FOR EACH ROW EXECUTE FUNCTION actualizar_lista_espera();

------------------------------------------------------------------------
-- 11. RESTRICCIONES (EXCLUDE) PARA EVITAR SOLAPAMIENTO DE CITAS
------------------------------------------------------------------------
ALTER TABLE Citas ADD CONSTRAINT no_solapamiento_citas
EXCLUDE USING gist (
  terapeuta_id WITH =,
  rango_horario WITH &&
);

-- Ajustar la columna estado en Citas para usar enum estado_cita_type
ALTER TABLE Citas 
  ALTER COLUMN estado TYPE estado_cita_type 
  USING estado::text::estado_cita_type;

------------------------------------------------------------------------
-- 12. ÍNDICES
------------------------------------------------------------------------
CREATE INDEX idx_citas_paciente ON Citas(paciente_id);
CREATE INDEX idx_citas_terapeuta ON Citas(terapeuta_id);
CREATE INDEX idx_citas_terapeuta_fecha ON Citas(terapeuta_id, fecha_hora);

CREATE INDEX idx_pacientes_estado ON Pacientes(estado);
CREATE INDEX idx_terapeutas_estado ON Terapeutas(estado);

CREATE INDEX idx_lista_espera_estado ON ListaEspera(estado);
CREATE INDEX idx_lista_espera_pac_ter ON ListaEspera(paciente_id, terapeuta_id);

------------------------------------------------------------------------
-- 13. CREAR USUARIOS DE EJEMPLO
------------------------------------------------------------------------
-- Admin
INSERT INTO Usuarios (email, rol)
VALUES ('dilan.pereava@amigo.edu.co', 'admin')
ON CONFLICT (email) DO NOTHING;

DELETE FROM Usuarios WHERE email = 'dilan.pereava@amigo.edu.co';


INSERT INTO Usuarios (email, rol)
VALUES ('johan.morenomu@amigo.edu.co', 'admin')
ON CONFLICT (email) DO NOTHING;

-- Ver estructura de la tabla Usuarios
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'usuarios';

-- Ver registro del usuario admin
SELECT * FROM Usuarios WHERE email = 'johan.morenomu@amigo.edu.co';
UPDATE Usuarios SET rol = 'terapeuta' WHERE email = 'johan.morenomu@amigo.edu.co';

------------------------------------------------------------------------
-- FIN DEL SCRIPT
------------------------------------------------------------------------
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'reportes';








